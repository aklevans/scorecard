// Code generated by MockGen. DO NOT EDIT.
// Source: internal/packageclient/depsdev.go

// Package mock_packageclient is a generated GoMock package.
package mockrepo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	packageclient "github.com/ossf/scorecard/v5/internal/packageclient"
)

// MockProjectPackageClient is a mock of ProjectPackageClient interface.
type MockProjectPackageClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectPackageClientMockRecorder
}

// MockProjectPackageClientMockRecorder is the mock recorder for MockProjectPackageClient.
type MockProjectPackageClientMockRecorder struct {
	mock *MockProjectPackageClient
}

// NewMockProjectPackageClient creates a new mock instance.
func NewMockProjectPackageClient(ctrl *gomock.Controller) *MockProjectPackageClient {
	mock := &MockProjectPackageClient{ctrl: ctrl}
	mock.recorder = &MockProjectPackageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectPackageClient) EXPECT() *MockProjectPackageClientMockRecorder {
	return m.recorder
}

// GetPackage mocks base method.
func (m *MockProjectPackageClient) GetPackage(ctx context.Context) (*packageclient.PackageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackage", ctx)
	ret0, _ := ret[0].(*packageclient.PackageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockProjectPackageClientMockRecorder) GetPackage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockProjectPackageClient)(nil).GetPackage), ctx)
}

// GetPackageDependencies mocks base method.
func (m *MockProjectPackageClient) GetPackageDependencies(ctx context.Context) (*packageclient.PackageDependencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageDependencies", ctx)
	ret0, _ := ret[0].(*packageclient.PackageDependencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageDependencies indicates an expected call of GetPackageDependencies.
func (mr *MockProjectPackageClientMockRecorder) GetPackageDependencies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageDependencies", reflect.TypeOf((*MockProjectPackageClient)(nil).GetPackageDependencies), ctx)
}

// GetPackageName mocks base method.
func (m *MockProjectPackageClient) GetPackageName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPackageName indicates an expected call of GetPackageName.
func (mr *MockProjectPackageClientMockRecorder) GetPackageName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageName", reflect.TypeOf((*MockProjectPackageClient)(nil).GetPackageName))
}

// GetProjectPackageVersions mocks base method.
func (m *MockProjectPackageClient) GetProjectPackageVersions(ctx context.Context, host, project string) (*packageclient.ProjectPackageVersions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectPackageVersions", ctx, host, project)
	ret0, _ := ret[0].(*packageclient.ProjectPackageVersions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectPackageVersions indicates an expected call of GetProjectPackageVersions.
func (mr *MockProjectPackageClientMockRecorder) GetProjectPackageVersions(ctx, host, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectPackageVersions", reflect.TypeOf((*MockProjectPackageClient)(nil).GetProjectPackageVersions), ctx, host, project)
}

// GetSystem mocks base method.
func (m *MockProjectPackageClient) GetSystem() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystem")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSystem indicates an expected call of GetSystem.
func (mr *MockProjectPackageClientMockRecorder) GetSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystem", reflect.TypeOf((*MockProjectPackageClient)(nil).GetSystem))
}

// GetURI mocks base method.
func (m *MockProjectPackageClient) GetURI(ctx context.Context, name, version, system string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURI", ctx, name, version, system)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURI indicates an expected call of GetURI.
func (mr *MockProjectPackageClientMockRecorder) GetURI(ctx, name, version, system interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURI", reflect.TypeOf((*MockProjectPackageClient)(nil).GetURI), ctx, name, version, system)
}

// GetVersion mocks base method.
func (m *MockProjectPackageClient) GetVersion(ctx context.Context, name, version, system string) (*packageclient.VersionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", ctx, name, version, system)
	ret0, _ := ret[0].(*packageclient.VersionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockProjectPackageClientMockRecorder) GetVersion(ctx, name, version, system interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockProjectPackageClient)(nil).GetVersion), ctx, name, version, system)
}
